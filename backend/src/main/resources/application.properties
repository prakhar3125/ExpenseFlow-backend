# ===============================================
# DATABASE CONNECTION CONFIGURATION (MySQL)
# ===============================================

# The JDBC URL for your MySQL database connection.
# The server host (e.g., localhost or a cloud host), port (usually 3306), and database name are specified here.
# The 'useSSL=false' parameter is often used for local development. For production, especially with cloud databases, it should be 'true'.
# The 'createDatabaseIfNotExist=true' is a convenient option for development.
spring.datasource.url=jdbc:mysql://localhost:3306/expense_tracker_db?useSSL=false&createDatabaseIfNotExist=true

# Your database username and password.
# It is highly recommended to use environment variables for these in production instead of hardcoding.
spring.datasource.username=root
spring.datasource.password=312531


# ===============================================
# JPA & HIBERNATE CONFIGURATION
# ===============================================

# This setting tells Hibernate (the JPA provider) how to handle the database schema.
# 'update': Hibernate will compare your @Entity classes to the database schema and automatically
#           add new tables, columns, or constraints as needed. This is very useful for development.
# 'validate': Hibernate will check if the tables and columns match the entities and fail if they don't. Good for production.
# 'create': Drops and re-creates the database schema on every startup. All data will be lost.
# 'none': Disables DDL handling.
spring.jpa.hibernate.ddl-auto=update

# Specify the MySQL dialect for Hibernate to ensure it generates the correct SQL syntax.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# (Optional) This makes the SQL queries generated by Hibernate visible in the console logs,
# which is very helpful for debugging.
spring.jpa.show-sql=true


# ===============================================
# JWT SECRET KEY CONFIGURATION
# ===============================================

# A secure, long, and random key for signing JWTs. This key is Base64-encoded and safe to use.
# In production, this should be set as an environment variable, not hardcoded here.
token.signing.key=Nzg5MmI0YjYtYTI3NC00ZjY1LTg5YjgtZDE2ODE3Y2I5ZDYyNzc0YjIzZGUtMDk4NC00M2I0LWI3YjYtYzljYTE5YjYwZWI5
